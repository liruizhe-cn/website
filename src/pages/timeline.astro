---
import SubPageLayout from "../layouts/SubPageLayout.astro";
import TimelineEvent from "../components/timeline/TimelineEvent.astro";
import { allTimelineEvents } from "../data/timelineEvents";
import "../styles/timeline.css";

const allEvents = allTimelineEvents;

const categories = [
  ...new Set(allEvents.map((event) => event.category).filter(Boolean)),
].sort();

let initialSortOrder = "newest";
let initialFilteredEvents = allTimelineEvents.sort((a, b) =>
  initialSortOrder === "newest"
    ? new Date(b.date).getTime() - new Date(a.date).getTime()
    : new Date(a.date).getTime() - new Date(b.date).getTime()
);
---

<SubPageLayout title="Timeline">
  <div class="timeline-controls">
    <div class="control-group category-tabs">
      <button
        type="button"
        class="category-tab"
        data-category="all"
        aria-pressed="true">All</button
      >
      {
        categories.map((cat) => (
          <button type="button" class="category-tab" data-category={cat}>
            {cat}
          </button>
        ))
      }
    </div>
  </div>

  <ul class="timeline-container mt-8">
    {
      initialFilteredEvents.map((event, index) => (
        <TimelineEvent
          date={event.date}
          dateRange={event.dateRange}
          title={event.title}
          description={event.description}
          category={event.category}
          isLast={index === initialFilteredEvents.length - 1}
        />
      ))
    }
  </ul>
</SubPageLayout>

<script define:vars={{ allEvents }}>
  let currentFilter = "all";
  let currentSort = "newest";

  let categoryTabs = null;
  let sortToggleButton = null;
  let timelineContainer = null;
  const allEventsData = allEvents;

  function formatTimelineDate(dateStr) {
    if (!dateStr || !dateStr.includes("-")) return dateStr; // Return original if invalid
    const [year, month] = dateStr.split("-");
    const dateObj = new Date(parseInt(year), parseInt(month) - 1); // Month is 0-indexed
    return dateObj.toLocaleString("en-US", { month: "long", year: "numeric" });
  }

  async function renderTimeline() {
    if (!timelineContainer || !allEventsData) {
      console.warn(
        "[Timeline Script] renderTimeline ABORT - Missing container or data. Container:",
        timelineContainer
      );
      return;
    }

    timelineContainer.classList.add("is-updating");

    await new Promise((resolve) => setTimeout(resolve, 300));

    let filteredEvents = allEventsData;
    if (currentFilter !== "all") {
      filteredEvents = allEventsData.filter(
        (event) => event.category === currentFilter
      );
    }

    filteredEvents.sort((a, b) => {
      const dateA = new Date(a.date.includes("-") ? a.date : `${a.date}-01-01`);
      const dateB = new Date(b.date.includes("-") ? b.date : `${b.date}-01-01`);
      const timeA = isNaN(dateA.getTime()) ? 0 : dateA.getTime();
      const timeB = isNaN(dateB.getTime()) ? 0 : dateB.getTime();

      return currentSort === "newest" ? timeB - timeA : timeA - timeB;
    });

    let timelineHTML = "";
    filteredEvents.forEach((event, index) => {
      const isLast = index === filteredEvents.length - 1;
      const displayDate = event.dateRange
        ? event.dateRange
        : formatTimelineDate(event.date);
      const descriptionHTML = event.description
        ? `<div class="timeline-description">${event.description}</div>`
        : "";

      timelineHTML += `
        <li class="timeline-event ${isLast ? "is-last" : ""}">
          <div class="timeline-marker"></div>
          <div class="timeline-content">
            <div class="timeline-header">
              <span class="timeline-date">${displayDate}</span>
              <h3 class="timeline-title">${event.title}</h3>
              <!-- ${event.category ? `<span class="timeline-category">${event.category}</span>` : ""} -->
            </div>
            ${descriptionHTML}
          </div>
        </li>
      `;
    });

    timelineContainer.innerHTML = timelineHTML;

    timelineContainer.classList.remove("is-updating");

    function reinitFooterAnimation() {
      document.dispatchEvent(new CustomEvent("refresh-footer-animation"));
    }
    if (!timelineContainer.hasAttribute("data-transition-listener-added")) {
      const handleTransitionEnd = (event) => {
        if (
          event.target === timelineContainer &&
          event.propertyName === "opacity"
        ) {
          reinitFooterAnimation();
          timelineContainer.removeEventListener(
            "transitionend",
            handleTransitionEnd
          );
          timelineContainer.removeAttribute("data-transition-listener-added");
        }
      };
      timelineContainer.addEventListener("transitionend", handleTransitionEnd);
      timelineContainer.setAttribute("data-transition-listener-added", "true");
    }
  }

  const handleCategoryClick = async (e) => {
    if (e.currentTarget instanceof HTMLElement) {
      const target = e.currentTarget;
      const category = target.dataset.category;
      if (category && category !== currentFilter) {
        currentFilter = category;
        updateCategoryTabStates();
        await renderTimeline();
      }
    }
  };

  function setupEventListeners() {
    if (!categoryTabs) {
      console.error(
        "[Timeline Script] Cannot setup listeners: categoryTabs not found."
      );
      return;
    }
    categoryTabs.forEach((tab) => {
      if (!(tab instanceof HTMLElement)) return;
      tab.removeEventListener("click", handleCategoryClick);
      tab.addEventListener("click", handleCategoryClick);
    });

    if (sortToggleButton) {
      const handleSortClick = async () => {
        const previousSort = currentSort;
        currentSort = currentSort === "newest" ? "oldest" : "newest";
        if (previousSort !== currentSort) {
          updateSortToggleState();
          await renderTimeline();
        }
      };

      sortToggleButton.removeEventListener("click", handleSortClick);
      sortToggleButton.addEventListener("click", handleSortClick);
    }
  }

  function updateCategoryTabStates() {
    if (!categoryTabs) return;
    categoryTabs.forEach((tab) => {
      if (!(tab instanceof HTMLElement)) return;
      if (tab.dataset.category === currentFilter) {
        tab.setAttribute("aria-pressed", "true");
      } else {
        tab.removeAttribute("aria-pressed");
      }
    });
  }

  function updateSortToggleState() {
    if (!sortToggleButton) return;
    sortToggleButton.dataset.sortCurrent = currentSort;
    sortToggleButton.textContent =
      currentSort === "newest" ? "Newest First" : "Oldest First";
  }

  function initializeTimeline() {
    categoryTabs = document.querySelectorAll(".category-tab");
    sortToggleButton = document.getElementById("sort-toggle");
    timelineContainer = document.querySelector(".timeline-container");

    if (!timelineContainer || !categoryTabs || categoryTabs.length === 0) {
      console.error(
        "[Timeline Script] initializeTimeline ABORT - Essential elements not found in DOM."
      );
      return;
    }
    currentFilter = "all";
    currentSort = "newest";

    renderTimeline();
    updateCategoryTabStates();
    updateSortToggleState();
    setupEventListeners();
  }

  document.addEventListener("astro:page-load", () => {
    initializeTimeline();
  });
</script>

<style>
  .timeline-controls {
    margin-bottom: 3rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
  }
  .control-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    align-items: center;
  }
  .control-group label {
    font-weight: 500;
    margin-right: 0.5rem;
    color: var(--text-muted);
  }

  .controls-note {
    font-size: 0.85rem;
    color: var(--text-muted);
    width: 100%;
    text-align: right;
    margin: 0.5rem 0 0;
  }

  .timeline-container {
    padding: 0;
    margin: 0;
  }

  .category-tabs {
    gap: 0.5rem 0rem;
    font-family: var(--font-family-sans);
  }
  .category-tab {
    font-family: inherit;
    font-size: 1rem;
    padding: 0.5em 1em 0.8em;
    border: none;
    border-bottom-width: 3px;
    border-bottom-style: solid;
    border-bottom-color: transparent;
    background-color: transparent;
    color: var(--text-muted);
    cursor: pointer;
    transition: all 0.2s ease;
    margin-bottom: -1px;
  }
  .category-tab:hover {
    border-bottom-color: var(--button-border-color);
    color: var(--text-color);
  }
  .category-tab[aria-pressed="true"] {
    border-bottom-color: var(--button-border-hover-color);
    color: var(--text-color);
    font-weight: 600;
  }

  #sort-toggle {
    font-family: inherit;
    font-size: 0.9rem;
    padding: 0.4em 0.9em;
    border-radius: 6px;
    border: 1px solid var(--button-border-hover-color);
    background-color: var(--button-hover-bg);
    color: var(--button-hover-text);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  #sort-toggle:hover {
    border-color: var(--button-border-color);
    background-color: transparent;
    color: var(--text-muted);
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .timeline-container {
    transition: opacity 0.3s ease-out;
    padding: 0;
    margin: 0;
  }

  .timeline-container.is-updating {
    opacity: 0;
  }

  @media (prefers-reduced-motion: reduce) {
    .timeline-container,
    .timeline-container.is-updating {
      transition: none;
      animation: none;
      opacity: 1;
    }
  }
</style>
